Index: chapter_002/src/main/java/ru.job4j/tracker/Tracker.java
===================================================================
--- chapter_002/src/main/java/ru.job4j/tracker/Tracker.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_002/src/main/java/ru.job4j/tracker/Tracker.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
@@ -1,0 +0,0 @@
Index: chapter_001/src/main/java/ru/job4j/condition/DymmyBot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/condition/DymmyBot.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/condition/DymmyBot.java	(date 1583862052080)
@@ -1,13 +1,25 @@
 package ru.job4j.condition;
 
+/**
+ * Программа Минибот. При получении приметивных вопросов бот выдает не менее приметивные ответы))
+ *
+ * @author Nikolai Goltsov
+ */
 public class DymmyBot {
+    /**
+     * Метод отвечает за логику работы Минибота. На вход принимается строка с вопросом и выдается ответ.
+     * Если вопрос не известен Миниботу у него заготовлен на это ответ))
+     *
+     * @param question Параметр принимает строку на вход.
+     * @return Возвращает строку с ответом.
+     */
     public static String answer(String question) {
-        String rls = "Это ставит меня в тупик. Задайте другой вопрос.";
+        String s = "Это ставит меня в тупик. Задайте другой вопрос.";
         if ("Привет, Бот.".equals(question)) {
-            rls = "Привет, умник";
+            s = "Привет, умник";
         } else if ("Пока.".equals(question)) {
-            rls = "До скорой встречи.";
+            s = "До скорой встречи.";
         }
-        return rls;
+        return s;
     }
 }
Index: chapter_001/src/main/java/ru/job4j/condition/Point.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/condition/Point.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/condition/Point.java	(date 1583864344388)
@@ -11,11 +11,6 @@
  */
 public class Point {
     public static double distance(int x1, int y1, int x2, int y2) {
-
-//        double x = Math.pow((x2-x1),2);
-//        double j = Math.pow((y2-y1),2);
-//        double distance = Math.sqrt(Math.pow((x2-x1),2)+Math.pow((y2-y1),2));
-
         return Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));
     }
 
Index: chapter_001/src/main/java/ru/job4j/condition/MultiMax.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/condition/MultiMax.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/condition/MultiMax.java	(date 1583864344380)
@@ -1,19 +1,20 @@
 package ru.job4j.condition;
 
+/**
+ * @author Nikolai Goltsov
+ */
 public class MultiMax {
+    /**
+     * Метод сравнивавет три числа и выводит максимальное
+     *
+     * @param first  Первое число
+     * @param second Второе число
+     * @param third  Третье число
+     * @return Возвращат максимальное
+     */
     public int max(int first, int second, int third) {
-        //int x = 0;
         int x = first > second ? first : second;
-        //  if (first>second){
-        //     x=first;
-        //}else {
-        //  x=second;
-        //}
         int result = third > x ? third : x;
-        //if (third>x){
-        //   x=third;
-        // }
         return result;
-
     }
 }
Index: chapter_001/src/main/java/ru/job4j/condition/Max.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/condition/Max.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/condition/Max.java	(date 1583863316844)
@@ -1,6 +1,16 @@
 package ru.job4j.condition;
 
+/**
+ * Метод для нахождения максимального числа из 2х чисел.
+ *
+ * @author Nikolai Goltsov
+ */
 public class Max {
+    /**
+     * @param left  Первое число
+     * @param right Второе число
+     * @return Возращает максимальное число
+     */
     public static int max(int left, int right) {
         int result = left > right ? left : right;
         return result;
Index: chapter_001/src/main/java/ru/job4j/array/FindLoop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/FindLoop.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/FindLoop.java	(date 1583698768896)
@@ -1,26 +1,42 @@
 package ru.job4j.array;
 
-//#4
+/**
+ * @author Nikolai Goltsov
+ */
 public class FindLoop {
+    /**
+     * Метод занимается поиском индекса заданного элемента
+     *
+     * @param data Входной массив
+     * @param el   Переменная, индекс, которой требуется найти
+     * @return возвращает найденнный индекс заданного элемета, или -1.
+     */
     public int indexOf(int[] data, int el) {
+
         int rst = -1; // если элемента нет в массиве, то возвращаем -1.
         for (int index = 0; index < data.length; index++) {
             if (data[index] == el) {
                 rst = index;
                 break;
             }
-
         }
-
         return rst;
     }
 
+    /**
+     * Метод занимается поиском индекса заданного элемента в указанном диапазоне
+     *
+     * @param data   Входной массив
+     * @param el     Переменная, индекс которой требуется найти
+     * @param start  постумаемый номер индекса с которого требуется начать поиск
+     * @param finish поступаемы номер индекса с после которого поиск следует прекратить.
+     * @return возвращает найденнный индекс заданного элемета, или -1.
+     */
     public static int indexOf(int[] data, int el, int start, int finish) {
         int rst = -1;
-
         for (int i = start; i <= finish; i++) {
             if (data[i] == el) {
-                rst = i; // Вот здесь было не верно!!!
+                rst = i;
                 break;
             }
         }
Index: chapter_001/src/main/java/ru/job4j/array/ArrayDefinition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/ArrayDefinition.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/ArrayDefinition.java	(date 1583659408967)
@@ -1,8 +1,13 @@
 package ru.job4j.array;
 
+/**
+ * @author Nikolay Goltsov
+ */
 public class ArrayDefinition {
+    /**
+     * Создали 3 массива разной длинны.
+     */
     public static void main(String[] args) {
-
         short[] ages = new short[10];
         String[] surnames = new String[100500];
         float[] prises = new float[40];
Index: chapter_001/src/main/java/ru/job4j/array/ArrayChar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/ArrayChar.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/ArrayChar.java	(date 1583654635775)
@@ -1,10 +1,20 @@
 package ru.job4j.array;
 
+/**
+ * @author Nikolay Goltsov
+ */
+
 public class ArrayChar {
+    /**
+     * Метод потучает на вход 2 массива, и делает их сравнение посимвольно
+     *
+     * @param world Начальный массив
+     * @param pref  Конечный массив
+     * @return Если символы отличаются то метод меняеть возвращаемое значение на false.
+     */
     public static boolean startsWith(char[] world, char[] pref) {
         boolean result = true;
         for (int i = 0; i < pref.length; i++) {
-
             if (pref[i] != world[i]) {
                 result = false;
                 break;
Index: chapter_001/src/main/java/ru/job4j/array/SortSelected.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/SortSelected.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/SortSelected.java	(date 1583762507822)
@@ -1,20 +1,25 @@
 package ru.job4j.array;
 
-//#2
+/**
+ * @author Nikolai Goltsov
+ */
 public class SortSelected {
+    /**
+     * Метод сортирует массив по минимальным элементам передвигая их по их индексам.
+     * int min- получает минимальное элемент во всём массиве
+     * int index- получет индекс элемента min
+     * int temp- временная переменная которая хранить следующий элемент после минимального.
+     * @param data входной не сортированный массив
+     * @return Возвращает отсорированный массив
+     */
     public static int[] sort(int[] data) {
-
-
         for (int i = 0; i < data.length; i++) {
-
-            int min = MinDiapason.findMin(data, i, data.length); // минимальный элемент
-            int index = FindLoop.indexOf(data, min, i, data.length); //Ищем индекс
-//           if (index<min) {
+            int min = MinDiapason.findMin(data, i, data.length-1);
+            int index = FindLoop.indexOf(data, min, i, data.length);
             int temp = data[i];
             data[i] = data[index];
             data[index] = temp;
         }
-//        }
         return data;
     }
 }
Index: chapter_001/src/main/java/ru/job4j/array/MatrixCheck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/MatrixCheck.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/MatrixCheck.java	(date 1583759394954)
@@ -1,19 +1,34 @@
 package ru.job4j.array;
 
+/**
+ * @author Nikolai Goltsov
+ */
 public class MatrixCheck {
+    /**
+     * Метод проверяет строки массива на наличие одинаковых символов в каждой ячкейке.
+     *
+     * @param board Входной массив с элементами
+     * @param rom   шндекс строки в которой производится поиск
+     * @return Если строка заполнена одинаковыми символами то возвращается true
+     */
     public static boolean monoHorizontal(char[][] board, int rom) {
         boolean result = true;
         for (int i = 0; i < board.length; i++) {
-
             if (board[rom][i] != 'X') {
                 result = false;
                 break;
-
             }
         }
         return result;
     }
 
+    /**
+     * Метод проверяет столбцы массива на наличие одинаковых символов в каждой ячкейке.
+     *
+     * @param board  Входной массив с элементами
+     * @param columm шндекс столбца в которой производится поиск
+     * @return Если столбец заполнена одинаковыми символами то возвращается true
+     */
     public static boolean monoVertical(char[][] board, int columm) {
         boolean result = true;
         for (int i = 0; i < board.length; i++) {
@@ -26,6 +41,12 @@
         return result;
     }
 
+    /**
+     * Метод проверяет диогональ массива на наличие  одинаковых символов в каждой ячейке
+     *
+     * @param board входной массив с элементами
+     * @return Если диогональ заполнена одинаковыми символами то возвращается true
+     */
     public static char[] extractDiagonal(char[][] board) {
         char[] rsl = new char[board.length];
         for (int i = 0; i < rsl.length; i++) {
@@ -34,12 +55,30 @@
         return rsl;
     }
 
+    /**
+     * Метод проверяет наличие символа 'X' в каждой ячейке массива. По строчно, по столбцам.
+     *
+     * @param board Входной массив
+     * @return Если в каждой ячейки строки или в каждой ячейке столбца содержится символ 'X', то возвращатеся true
+     */
     public static boolean isWin(char[][] board) {
         boolean result = false;
+        int countLine = 0;
+        int countColumn = 0;
         for (int i = 0; i < board.length; i++) {
             if (board[i][i] == 'X') {
-                result = true;
-//                break;
+                for (int j = 0; j < board.length; j++) {
+                    if (board[i][j] == 'X') {
+                        countLine++;
+                    }
+                    if (board[j][i] == 'X') {
+                        countColumn++;
+                    }
+                }
+                if (countColumn == board.length || countLine == board.length) {
+                    result = true;
+                    break;
+                }
             }
         }
         return result;
Index: chapter_001/src/main/java/ru/job4j/array/Defragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/Defragment.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/Defragment.java	(date 1583659408951)
@@ -1,27 +1,43 @@
 package ru.job4j.array;
 
+/**
+ * @author Nikolai Goltsov
+ */
 public class Defragment {
+    /**
+     * Метод compress упорядочивает ячейки массива. Пустые этементы помещаются в конец массива.
+     * В переменную point записывается значение первой найденной пустой (ячейки со значением null) ячейки/
+     * Цикл while работает пока пустая ячейка не будет заполнена/заменена на ячейку со значением.
+     * Перемещение элементов происходит благодаря условию в цикле while.
+     * Если найдена ячейка со значением, то ее значение записывается в ячейку с индексом point.
+     * И найденная ячейка "зануляется",становится null.
+     *
+     * @param array Входной массив типа String с неупорядочными ячейками
+     * @return Возвращает массив типа String c упорядочными ячейками.
+     */
     public static String[] compress(String[] array) {
         for (int i = 0; i < array.length; i++) {
             if (array[i] == null) {
-                int point = i + 1; //указатель на не null ячейку.По факту указатель на пустую ячейку.
-                //переместить первую не null ячейку
-                while (point < array.length) { //работает пока пустая ячейка не заполнена
+                int point = i + 1;
+                while (point < array.length) {
                     if (array[point] != null) {
-                        array[i] = array[point]; //меням следующий элемент местами с пустым
-                        array[point] = null; //очищаем ячейку
-                        // тут надо вернутся на элемент назад
+                        array[i] = array[point];
+                        array[point] = null;
                         break;
-
                     }
                     point++;
                 }
-
             }
         }
         return array;
     }
 
+    /**
+     * Проверка работы метода compress.
+     * Подается неупорядоченный массив строк input.
+     * Печатается неупорядоченный массив.
+     * Через цикл for выводится упорядоченный массив.
+     */
     public static void main(String[] args) {
         String[] input = {"I", null, "wanna", null, "be", null, "compressed"};
         String[] compressed = compress(input);
Index: chapter_001/src/main/java/ru/job4j/array/MinDiapason.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/MinDiapason.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/MinDiapason.java	(date 1583761319444)
@@ -1,16 +1,23 @@
 package ru.job4j.array;
 
-//#3
+/**
+ * @author Nikolai Goltsov
+ */
 public class MinDiapason {
+    /**
+     *Метод ищет минимальное число в заданном диапазоне.
+     * @param array Входной массив типа int
+     * @param start Индекс начала поиска
+     * @param finish индекс окончания поиска
+     * @return Возвращает минимальное число из диапазона поиска.
+     */
     public static int findMin(int[] array, int start, int finish) {
         int min = array[start];
-        for (int i = start; i < finish; i++) {
+        for (int i = start; i <= finish; i++) {
             if (array[i] < min) {
                 min = array[i];
             }
         }
-
         return min;
-
     }
 }
Index: chapter_001/src/main/java/ru/job4j/array/Square.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/Square.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/Square.java	(date 1583849546334)
@@ -1,6 +1,14 @@
 package ru.job4j.array;
 
+/**
+ * @author  Nikolay Goltsov
+ */
 public class Square {
+    /**
+     *
+     * @param bound входной число
+     * @return Возвращает квадрат чисел от 0 до (выходного числа -1)
+     */
     public static int[] calculate(int bound) {
         int[] rst = new int[bound];
         for (int i = 0; i < bound; i++) {
Index: chapter_001/src/main/java/ru/job4j/array/EndsWith.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/EndsWith.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/EndsWith.java	(date 1583702467517)
@@ -1,18 +1,21 @@
 package ru.job4j.array;
 
+/**
+ * @author Nikolai Goltsov
+ */
 public class EndsWith {
+    /**
+     * Метод сравнивает сиволы с конца строки
+     *
+     * @param word входной массив со строкой
+     * @param post массив с частью строки для сравнения.
+     * @return Если post совпадает с окончанием строки из массива world, будет возвращено true.
+     * int endPost и int endWorld указывают на длинну массивов, соответственно. С каждым прохода цикла for, их длинна уменьшается.
+     * Тем самым проверяется кажтый символ строки.
+     */
     public static boolean endsWith(char[] word, char[] post) {
+
         boolean result = true;
-
-
-        // проверить. что массив word имеет последние элементы одинаковые с post
-//        for (int i = word.length-1; i >= 0; i--) {
-//                if (post[i] != word[i]) {
-//                    result = false;
-//                    break;
-//                }
-//            }
-
         for (int endPost = post.length - 1, endWord = word.length - 1; endPost < endWord; endPost--, endWord--) {
             if (endPost < 0) {
                 break;
@@ -21,9 +24,7 @@
                 result = false;
                 break;
             }
-
         }
-
         return result;
     }
 }
Index: chapter_001/src/main/java/ru/job4j/array/AlgoArray.java
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/AlgoArray.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/SortArray.java	(date 1583654893415)
@@ -1,23 +1,25 @@
 package ru.job4j.array;
 
-public class AlgoArray {
+/**
+ * В классе SortArray описан алгоритм сортировки массива.
+ * temp- Временная переменная
+ *
+ * @author Nikolay Goltsov
+ */
+public class SortArray {
     public static void main(String[] args) {
         int[] array = new int[]{5, 3, 2, 1, 4};
-        int temp = array[0]; //Переменная для временного хранения.
+        int temp = array[0];
         array[0] = array[3];
         array[3] = temp;
-
         temp = array[1];
         array[1] = array[2];
         array[2] = temp;
-
         temp = array[3];
         array[3] = array[4];
         array[4] = temp;
-
         for (int i = 0; i < array.length; i++) {
             System.out.print(array[i] + " ");
         }
-
     }
 }
Index: chapter_001/src/main/java/ru/job4j/array/Min.java
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/Min.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/MinArr.java	(date 1583703362843)
@@ -1,6 +1,15 @@
 package ru.job4j.array;
 
-public class Min {
+/**
+ * @author Nikolai Goltsov
+ */
+public class MinArr {
+    /**
+     * Метод для моиска минимального значения в массиве
+     *
+     * @param array массив этементов типа int
+     * @return возвращает минимальное значение
+     */
     public static int findMin(int[] array) {
         int min = array[0];
         for (int i = 0; i < array.length; i++) {
Index: chapter_001/src/main/java/ru/job4j/array/Matrix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/Matrix.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/Matrix.java	(date 1583702973679)
@@ -1,6 +1,15 @@
 package ru.job4j.array;
 
+/**
+ * @author Nikolai Goltsov
+ */
 public class Matrix {
+    /**
+     * Метод для создания классической таблицы умножения, на основе матрицы.
+     *
+     * @param size переменная указывающая размер матрицы.
+     * @return Возвращает полученную матрицу
+     */
     public static int[][] multiple(int size) {
         int[][] table = new int[size][size];
         for (int i = 0; i < table.length; i++) {
@@ -8,7 +17,6 @@
                 table[i][j] = (i + 1) * (j + 1);
             }
         }
-
         return table;
     }
 }
Index: chapter_001/src/main/java/ru/job4j/array/Check.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/array/Check.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/array/Check.java	(date 1583659408951)
@@ -1,6 +1,14 @@
 package ru.job4j.array;
 
+/**
+ * @author Nikolay Goltsov
+ */
 public class Check {
+    /**
+     * @param data Входной массив c элементами
+     *             temp- временная переменная для хранения значения
+     * @return Если элементы не одинаковые, возвращаемое значение меняется на false
+     */
     public static boolean mono(boolean[] data) {
         boolean result = true;
         for (int i = 0; i < data.length; i++) {
Index: chapter_001/src/test/java/ru/job4j/calculator/FitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/calculator/FitTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/calculator/FitTest.java	(date 1583850580684)
@@ -3,8 +3,11 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+/**
+ * @author Nikolay Goltssov
+ * Класс тест для проверки методов  manWeight и womanWeight из класса Fit
+ */
 public class FitTest {
-
     @Test
     public void manWeight() {
         double man = 175;
@@ -20,5 +23,4 @@
         double out = Fit.womanWeight(woman);
         Assert.assertEquals(expected, out, 0.1);
     }
-
 }
Index: chapter_001/src/test/java/ru/job4j/condition/DymmyBotTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/condition/DymmyBotTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/condition/DymmyBotTest.java	(date 1583863316837)
@@ -6,7 +6,12 @@
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
-
+/**
+ * Класс тест для проверки Минибота из класса DimmyBot.
+ * Задаем простые вопросы и сверяем их с ответами
+ *
+ * @author Nikolai Goltsov
+ */
 public class DymmyBotTest {
     @Test
     public void whenGreetBot() {
Index: chapter_001/src/test/java/ru/job4j/condition/MultiMaxTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/condition/MultiMaxTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/condition/MultiMaxTest.java	(date 1583864344364)
@@ -1,13 +1,28 @@
 package ru.job4j.condition;
+
 import org.junit.Test;
+
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
+
+/**
+ * Класс тест для метода мах из класса MultiMax
+ *
+ * @author Nikolai Goltsov
+ */
 public class MultiMaxTest {
     @Test
-    public void whenSecondMax() {
+    public void whenFirstMax() {
         MultiMax check = new MultiMax();
         int result = check.max(10, 4, 2);
         assertThat(result, is(10));
     }
 
+    @Test
+    public void whenSecondMax() {
+        MultiMax check = new MultiMax();
+        int result = check.max(2, 15, 4);
+        assertThat(result, is(15));
+    }
+
 }
Index: chapter_001/src/test/java/ru/job4j/condition/MaxTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/condition/MaxTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/condition/MaxTest.java	(date 1583863316821)
@@ -5,6 +5,11 @@
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
+/**
+ * Класс тест для метода max из класса Max
+ *
+ * @author Nikolai Goltsov
+ */
 public class MaxTest {
 
     @Test
Index: chapter_001/src/test/java/ru/job4j/array/ArrayCharTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/array/ArrayCharTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/array/ArrayCharTest.java	(date 1583654635759)
@@ -5,6 +5,13 @@
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
+/**
+ * @author Nikolay Goltsov
+ * Класс тест для тестирования метода startsWith из класса ArrayChar
+ * world - Начальный массив. Массив,который сравнивают.
+ * pref - Конечный массив. Массив, с которым сравнивают.
+ */
+
 public class ArrayCharTest {
     @Test
     public void whenStartWithPrefixThenTrue() {
Index: chapter_001/src/test/java/ru/job4j/array/DefragmentTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/array/DefragmentTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/array/DefragmentTest.java	(date 1583659633894)
@@ -5,6 +5,12 @@
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
+/**
+ * Класс тест метода compress из класса Defragment.
+ * Неупорядочные массивы подяются на вход метода compress.
+ *
+ * @author Nikolai Goltsov
+ */
 public class DefragmentTest {
     @Test
     public void notFirstNull() {
Index: chapter_001/src/test/java/ru/job4j/array/MatrixTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/array/MatrixTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/array/MatrixTest.java	(date 1583702973674)
@@ -5,16 +5,22 @@
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
+/**
+ * @author Nikolai Goltsov
+ * Класс тест для проверки метода multiple из класса Matrix.
+ * На взод методу multiple задаем размер матрицы.
+ */
 public class MatrixTest {
 
     @Test
     public void when3on3() {
         Matrix matrix = new Matrix();
-        int[][] table = matrix.multiple(3);
+        int[][] table = matrix.multiple(4);
         int[][] expect = {
-                {1, 2, 3},
-                {2, 4, 6},
-                {3, 6, 9}
+                {1, 2, 3, 4},
+                {2, 4, 6, 8},
+                {3, 6, 9, 12},
+                {4, 8, 12, 16}
         };
         assertThat(table, is(expect));
     }
Index: chapter_001/src/test/java/ru/job4j/array/MinTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/array/MinTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/array/MinTest.java	(date 1583703362853)
@@ -4,22 +4,26 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
-
+/**
+ * @author Nikolai Goltsov
+ * Класс тест для проверки метода findMin из класcа MinArr
+ * На вход методу findMin передаем массив типа int
+ */
 public class MinTest {
 
     @Test
     public void whenFirstMin() {
-        assertThat(Min.findMin(new int[]{0, 5, 10}), is(0));
+        assertThat(MinArr.findMin(new int[]{0, 5, 10}), is(0));
     }
 
     @Test
     public void lastMin() {
-        assertThat(Min.findMin(new int[]{10, 5, 3}), is(3));
+        assertThat(MinArr.findMin(new int[]{10, 5, 3}), is(3));
     }
 
     @Test
     public void middleMin() {
-        assertThat(Min.findMin(new int[]{10, 2, 5}), is(2));
+        assertThat(MinArr.findMin(new int[]{10, 2, 5}), is(2));
     }
 
 }
Index: chapter_001/src/test/java/ru/job4j/array/FindLoopTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/array/FindLoopTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/array/FindLoopTest.java	(date 1583699462967)
@@ -5,6 +5,14 @@
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
+/**
+ * @author Nikolai Goltsov
+ * Класс тестирующий метод (indexOf, из класса FindLoop) поиска индекса заданного элемента.
+ * int[] input- входной массив
+ * int value- переменная индекс которой надо найти
+ * int start- номер индекса с которого начнется поиск.
+ * int finish- номер индекса на котором поиск закончится.
+ */
 public class FindLoopTest {
 
     @Test
@@ -18,26 +26,23 @@
     }
 
     @Test
-    public void whenAraayHasnot6() {
+    public void whenArrayHasNot6() {
         FindLoop find = new FindLoop();
         int[] input = new int[]{5, 10, 3};
         int value = 6;
         int result = find.indexOf(input, value);
-        int expect = 0;
-        //либо
-//        expect=-1;
-        // и тест проходит без ошибок.
+        int expect = -1;
         assertThat(result, is(expect));
     }
 
     @Test
     public void whenFind3() {
-        int[] input = new int[]{5, 2, 10, 2, 4};
+        int[] input = new int[]{5, 2, 3, 10, 4};
         int value = 3;
         int start = 0;
-        int finsh = 4;
-        int result = FindLoop.indexOf(input, value, start, finsh);
-        int expect = 3;
+        int finish = 4;
+        int result = FindLoop.indexOf(input, value, start, finish);
+        int expect = 2;
         assertThat(result, is(expect));
     }
 
@@ -46,9 +51,9 @@
         int[] input = new int[]{5, 2, 10, 2, 40};
         int value = 40;
         int start = 2;
-        int finsh = 4;
-        int result = FindLoop.indexOf(input, value, start, finsh);
-        int expect = 40;
+        int finish = 4;
+        int result = FindLoop.indexOf(input, value, start, finish);
+        int expect = 4;
         assertThat(result, is(expect));
     }
 }
Index: chapter_001/src/test/java/ru/job4j/array/SortSelectedTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/array/SortSelectedTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/array/SortSelectedTest.java	(date 1583762507808)
@@ -1,5 +1,10 @@
 package ru.job4j.array;
-//#1
+
+/**
+ * @autor Nikolai Goltsov
+ *
+ * Класс тест метода sort из класса SortSelected.
+ */
 
 import org.junit.Test;
 
Index: chapter_001/src/test/java/ru/job4j/array/CheckTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/array/CheckTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/array/CheckTest.java	(date 1583659408967)
@@ -5,7 +5,16 @@
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
+
 public class CheckTest {
+    /**
+     * Класс тест для проверки метода mono из класса Check.
+     * whenDataMonoByTrueThenTrue- подаем массив с одинаковыми элементами.
+     * whenDataMonoByTrueThenFalse- подаем массив с разными элементами.
+     *
+     * @author Nikolay Goltsov
+     */
+
     @Test
     public void whenDataMonoByTrueThenTrue() {
         boolean[] input = new boolean[]{true, true, true};
@@ -15,6 +24,7 @@
 
     @Test
     public void whenDataNotMonoByTrueThenFalse() {
+
         boolean[] input = new boolean[]{true, false, true};
         boolean result = Check.mono(input);
         assertThat(result, is(false));
Index: chapter_001/src/test/java/ru/job4j/array/MatrixCheckTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/array/MatrixCheckTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/array/MatrixCheckTest.java	(date 1583759788118)
@@ -5,6 +5,16 @@
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
+/**
+ * @author Nikolai Goltsov
+ * Класс тест для проверки методов из класcа MatrixCheck. Проверяем каждую ячейку на наличие символа 'X'
+ * whenHasMonoHorizontal- проверяем определеннуй горизонтальную строку
+ * whenMonoVertical- проверяем определенную вертикальную строку
+ * whenDiagonal- проверяем любую диоганаль
+ * whenDataMonoByTrueThenTrue- проверяем заполнение любой строки
+ * whenDataNotMonoByTrueThenFalse- проверяем если одна ячейка не заполнена
+ * whenDataHMonoByTrueThenTrue- проверяем если одна строка запонена полностью, а другая нет.
+ */
 public class MatrixCheckTest {
     @Test
     public void whenHasMonoHorizontal() {
Index: chapter_001/src/test/java/ru/job4j/array/MinDiapasonTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/array/MinDiapasonTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/array/MinDiapasonTest.java	(date 1583761025152)
@@ -5,6 +5,11 @@
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
+/**
+ * @author Nikolai Goltsov
+ * Класс тест метеда findMin из класса MinDiapason.
+ *
+ */
 public class MinDiapasonTest {
 
     @Test
Index: chapter_001/src/test/java/ru/job4j/array/EndsWithTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/test/java/ru/job4j/array/EndsWithTest.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/test/java/ru/job4j/array/EndsWithTest.java	(date 1583702604982)
@@ -5,7 +5,11 @@
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
-
+/**
+ * Класс тест для проверки метода endsWith из касса EndsWith
+ *
+ * @author Nikolay Goltsov
+ */
 public class EndsWithTest {
     @Test
     public void whenEndWithPrefixThenTrue() {
Index: chapter_001/src/main/java/ru/job4j/calculator/Calculator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/calculator/Calculator.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/calculator/Calculator.java	(date 1583850398357)
@@ -1,40 +1,62 @@
 package ru.job4j.calculator;
 
-/*
+/**
  * Class Calculator. Приметивный калькулятор, для начала.
- * @author Goltsov
+ *
+ * @author Goltsov Nikolay
  * @since ...01.20г.
-
  */
 public class Calculator {
-
+    /**
+     * Метед считает и выводит сумму чисел
+     *
+     * @param first  Первое число
+     * @param second Второе число
+     */
     public static void add(double first, double second) {
         double result = first + second;
         System.out.println(first + " + " + second + " = " + result);
     }
 
+    /**
+     * Метед считает и выводит деление чисел (первое на второе)
+     *
+     * @param first  Первое число
+     * @param second Второе число
+     */
     public static void div(double first, double second) {
         double result = first / second;
         System.out.println(first + " / " + second + " = " + result);
     }
 
+    /**
+     * Метед считает и выводит произведение чисел
+     *
+     * @param first  Первое число
+     * @param second Второе число
+     */
     public static void mulriply(double first, double second) {
         double result = first * second;
         System.out.println(first + " * " + second + " = " + result);
     }
 
+    /**
+     * Метед считает и выводит разность чисел (от первого вычитается второе)
+     *
+     * @param first  Первое число
+     * @param second Второе число
+     */
     public static void subtract(double first, double second) {
         double result = first - second;
         System.out.println(first + " - " + second + " = " + result);
     }
-    /*
+
+    /**
      * Главный класс для запуска программы.
      * Проверк созданных методов.
      * Примечание- методы выводят информацию в консоль.
      * Конструктор вывод строки в консоль.
-     * @param arg - args.
-     * */
-
+     */
 
     public static void main(String[] args) {
 
Index: chapter_001/src/main/java/ru/job4j/calculator/Git.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/calculator/Git.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/calculator/Git.java	(date 1583850398367)
@@ -1,4 +1,8 @@
 package ru.job4j.calculator;
 
+/**
+ * @author  Nikolai Goltsov
+ * Пустой класс. Может быть пригодится
+ */
 public class Git {
 }
Index: chapter_001/src/main/java/ru/job4j/calculator/Size.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/calculator/Size.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/calculator/Size.java	(date 1583862052086)
@@ -1,11 +1,27 @@
 package ru.job4j.calculator;
 
+/**
+ * @author Nikolai Goltsov
+ * Класс проверка взоимодействия методов.
+ */
 public class Size {
+    /**
+     * Метод, чего-то считает
+     *
+     * @param left  параметр получает значение переменной nike
+     * @param right параметр получает значение переменной puma
+     * @return Возвращает сумму переменных nike and puma
+     */
     public int add(int left, int right) {
         int result = left + right;
         return result;
     }
 
+    /**
+     * Метод принемает значение от метода add и выводит его в консоль
+     *
+     * @param size параметр принемает на вход возвращаемое значение из метода add
+     */
     public void info(int size) {
         System.out.println("Your size is: " + size);
     }
Index: chapter_001/src/main/java/ru/job4j/calculator/Fit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chapter_001/src/main/java/ru/job4j/calculator/Fit.java	(revision 6683d952dfdac28a4d3dc7fe2a20cc427ec56bbd)
+++ chapter_001/src/main/java/ru/job4j/calculator/Fit.java	(date 1583850398376)
@@ -1,31 +1,36 @@
 package ru.job4j.calculator;
 
-/*
-Задание.
-
-1. Реализуйте методы manWeight и womanWeight. Нужно дописать код, чтобы методы возвращали идеальный вес для мужчины и женщины.
-Вместо -1D вам нужно написать формулу.
-Добавьте в метод main демонстрацию работы методов.
-
-Идеальный вес для мужчин = (рост в сантиметрах – 100) · 1,15.
-Идеальный вес для женщин = (рост в сантиметрах – 110) · 1,15.
+/**
+ * @author Nikolai Goltsov
  */
 public class Fit {
+    /**
+     * Метод расчитывает идеальный вес для мужчины
+     *
+     * @param height Входной параметра роста
+     * @return Возвращает идеальный вес
+     */
     public static double manWeight(double height) {
         double value = (height - 100) * 1.15;
         return value;
     }
-
-
+    /**
+     *Метод расчитывает идеальный вес для женщины
+     * @param height Входной параметр роста
+     * @return Возвращает идеальный вес
+     */
     public static double womanWeight(double height) {
         double value = (height - 110) * 1.15;
         return value;
     }
 
+    /**
+     * Проверка методов путем ввода роста человека в параметр метода.
+     * @param args
+     */
     public static void main(String[] args) {
         double man = manWeight(175);
         System.out.println("Man 175 is " + man);
-
         double woman = womanWeight(175);
         System.out.println("Woman 175 is " + woman);
     }
